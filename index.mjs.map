{"version":3,"file":"index.mjs","sources":["../lib/base.js","../lib/sger.js","../lib/ndarray.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major';\n\n\n// MAIN //\n\n/**\n* Performs the rank 1 operation `A = α*x*y^T + A`, where `α` is a scalar, `x` is an `M` element vector, `y` is an `N` element vector, and `A` is an `M` by `N` matrix.\n*\n* ## Notes\n*\n* -   To help motivate the use of loop interchange below, we first recognize that a matrix stored in row-major order is equivalent to storing the matrix's transpose in column-major order. For example, consider the following 2-by-3 matrix `A`\n*\n*     ```tex\n*     A = \\begin{bmatrix}\n*         1 & 2 & 3 \\\\\n*         4 & 5 & 6\n*         \\end{bmatrix}\n*     ```\n*\n*     When stored in a linear buffer in column-major order, `A` becomes\n*\n*     ```text\n*     [ 1 4 2 5 3 6]\n*     ```\n*\n*     When stored in a linear buffer in row-major order, `A` becomes\n*\n*     ```text\n*     [ 1 2 3 4 5 6]\n*     ```\n*\n*     Now consider the transpose of `A`\n*\n*     ```tex\n*     A^T = \\begin{bmatrix}\n*         1 & 4 \\\\\n*         2 & 5 \\\\\n*         3 & 6\n*         \\end{bmatrix}\n*     ```\n*\n*     When the transpose is stored in a linear buffer in column-major order, the transpose becomes\n*\n*     ```text\n*     [ 1 2 3 4 5 6 ]\n*     ```\n*\n*     Similarly, when stored in row-major order, the transpose becomes\n*\n*     ```text\n*     [ 1 4 2 5 3 6 ]\n*     ```\n*\n*     As may be observed, `A` stored in column-major order is equivalent to storing the transpose of `A` in row-major order, and storing `A` in row-major order is equivalent to storing the transpose of `A` in column-major order, and vice versa.\n*\n*     Hence, we can interpret an `M` by `N` row-major matrix `B` as the matrix `A^T` stored in column-major order. In which case, we can derive an update equation for `B` as follows:\n*\n*     ```tex\n*     \\begin{align*}\n*     B &= A^T \\\\\n*       &= (\\alpha \\bar{x} \\bar{y}^T + A)^T \\\\\n*       &= (\\alpha \\bar{x} \\bar{y}^T)^T + A^T \\\\\n*       &= \\alpha (\\bar{x} \\bar{y}^T)^T + A^T \\\\\n*       &= \\alpha \\bar{y} \\bar{x}^T + A^T \\\\\n*       &= \\alpha \\bar{y} \\bar{x}^T + B\n*     \\end{align*}\n*     ```\n*\n*     Accordingly, we can reuse the same loop logic for column-major and row-major `A` by simply swapping `x` and `y` and `M` and `N` when `A` is row-major order. That is the essence of loop interchange.\n*\n* @private\n* @param {NonNegativeInteger} M - number of rows in the matrix `A`\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n*\n* sger( 2, 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 ]\n*/\nfunction sger( M, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-params, max-len\n\tvar tmp;\n\tvar da0;\n\tvar da1;\n\tvar S0;\n\tvar S1;\n\tvar sx;\n\tvar sy;\n\tvar ia;\n\tvar ix;\n\tvar iy;\n\tvar i0;\n\tvar i1;\n\n\t// Note on variable naming convention: S#, da#, ia#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( [ strideA1, strideA2 ] ) ) {\n\t\t// For row-major matrices, the last dimension has the fastest changing index...\n\t\tS0 = N;\n\t\tS1 = M;\n\t\tda0 = strideA2;                   // offset increment for innermost loop\n\t\tda1 = strideA1 - ( S0*strideA2 ); // offset increment for outermost loop\n\n\t\t// Swap the vectors...\n\t\ttmp = x;\n\t\tx = y;\n\t\ty = tmp;\n\n\t\ttmp = strideX;\n\t\tstrideX = strideY;\n\t\tstrideY = tmp;\n\n\t\ttmp = offsetX;\n\t\toffsetX = offsetY;\n\t\toffsetY = tmp;\n\t} else { // order === 'column-major'\n\t\t// For column-major matrices, the first dimension has the fastest changing index...\n\t\tS0 = M;\n\t\tS1 = N;\n\t\tda0 = strideA1;                   // offset increment for innermost loop\n\t\tda1 = strideA2 - ( S0*strideA1 ); // offset increment for outermost loop\n\t}\n\tsx = strideX;\n\tsy = strideY;\n\tix = offsetX;\n\tiy = offsetY;\n\tia = offsetA;\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t// Check whether we can avoid the inner loop entirely...\n\t\tif ( y[ iy ] === 0.0 ) {\n\t\t\tia += da0 * S0;\n\t\t} else {\n\t\t\ttmp = alpha * y[ iy ];\n\t\t\tix = offsetX;\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tA[ ia ] += x[ ix ] * tmp;\n\t\t\t\tix += sx;\n\t\t\t\tia += da0;\n\t\t\t}\n\t\t}\n\t\tiy += sy;\n\t\tia += da1;\n\t}\n\treturn A;\n}\n\n\n// EXPORTS //\n\nexport default sger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isColumnMajor from '@stdlib/ndarray-base-assert-is-column-major-string';\nimport isLayout from '@stdlib/blas-base-assert-is-layout';\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport max from '@stdlib/math-base-special-fast-max';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the rank 1 operation `A = α*x*y^T + A`, where `α` is a scalar, `x` is an `M` element vector, `y` is an `N` element vector, and `A` is an `M` by `N` matrix.\n*\n* @param {string} order - storage layout\n* @param {NonNegativeInteger} M - number of rows in the matrix `A`\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {Float32Array} A - input matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} third argument must be a nonnegative integer\n* @throws {RangeError} sixth argument must be non-zero\n* @throws {RangeError} eighth argument must be non-zero\n* @throws {RangeError} tenth argument must be a valid stride\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n*\n* sger( 'row-major', 2, 3, 1.0, x, 1, y, 1, A, 3 );\n* // A => <Float32Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 ]\n*/\nfunction sger( order, M, N, alpha, x, strideX, y, strideY, A, LDA ) {\n\tvar iscm;\n\tvar vala;\n\tvar sa1;\n\tvar sa2;\n\tvar ox;\n\tvar oy;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( M < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Sixth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideY ) );\n\t}\n\tiscm = isColumnMajor( order );\n\tif ( iscm ) {\n\t\tvala = M;\n\t} else {\n\t\tvala = N;\n\t}\n\tif ( LDA < max( 1, vala ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Tenth argument must be greater than or equal to max(1,%d). Value: `%d`.', vala, LDA ) );\n\t}\n\t// Check if we can early return...\n\tif ( M === 0 || N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\tox = stride2offset( M, strideX );\n\toy = stride2offset( N, strideY );\n\tif ( iscm ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\treturn base( M, N, alpha, x, strideX, ox, y, strideY, oy, A, sa1, sa2, 0 );\n}\n\n\n// EXPORTS //\n\nexport default sger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Performs the rank 1 operation `A = α*x*y^T + A`, where `α` is a scalar, `x` is an `M` element vector, `y` is an `N` element vector, and `A` is an `M` by `N` matrix.\n*\n* @param {NonNegativeInteger} M - number of rows in the matrix `A`\n* @param {NonNegativeInteger} N - number of columns in the matrix `A`\n* @param {number} alpha - scalar constant\n* @param {Float32Array} x - first input vector\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input vector\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @param {Float32Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @throws {RangeError} first argument must be a nonnegative integer\n* @throws {RangeError} second argument must be a nonnegative integer\n* @throws {RangeError} fifth argument must be non-zero\n* @throws {RangeError} eighth argument must be non-zero\n* @returns {Float32Array} `A`\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var x = new Float32Array( [ 1.0, 1.0 ] );\n* var y = new Float32Array( [ 1.0, 1.0, 1.0 ] );\n*\n* sger( 2, 3, 1.0, x, 1, 0, y, 1, 0, A, 3, 1, 0 );\n* // A => <Float32Array>[ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 ]\n*/\nfunction sger( M, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-params, max-len\n\tif ( M < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%d`.', M ) );\n\t}\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\tif ( strideX === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be non-zero. Value: `%d`.', strideX ) );\n\t}\n\tif ( strideY === 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Eighth argument must be non-zero. Value: `%d`.', strideY ) );\n\t}\n\t// Check if we can early return...\n\tif ( M === 0 || N === 0 || alpha === 0.0 ) {\n\t\treturn A;\n\t}\n\treturn base( M, N, alpha, x, strideX, offsetX, y, strideY, offsetY, A, strideA1, strideA2, offsetA ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sger;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport sger from './sger.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sger, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sger;\n"],"names":["sger","M","N","alpha","x","strideX","offsetX","y","strideY","offsetY","A","strideA1","strideA2","offsetA","tmp","da0","da1","S0","S1","sx","sy","ia","ix","iy","i0","i1","isRowMajor","order","LDA","iscm","vala","sa1","sa2","isLayout","TypeError","format","RangeError","isColumnMajor","max","base","stride2offset","setReadOnly","ndarray"],"mappings":";;iuBAsHA,SAASA,EAAMC,EAAGC,EAAGC,EAAOC,EAAGC,EAASC,EAASC,EAAGC,EAASC,EAASC,EAAGC,EAAUC,EAAUC,GAC5F,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAoCJ,IA/BKC,EAAY,CAAEf,EAAUC,KAG5BM,EAAKjB,EACLc,EAAMH,EACNI,EAAML,GAHNM,EAAKf,GAGiBU,EAGtBE,EAAMV,EACNA,EAAIG,EACJA,EAAIO,EAEJA,EAAMT,EACNA,EAAUG,EACVA,EAAUM,EAEVA,EAAMR,EACNA,EAAUG,EACVA,EAAUK,IAIVI,EAAKhB,EACLa,EAAMJ,EACNK,EAAMJ,GAHNK,EAAKhB,GAGiBU,GAEvBQ,EAAKd,EACLe,EAAKZ,EACLc,EAAKhB,EACLiB,EAAKd,EACLY,EAAKR,EACCY,EAAK,EAAGA,EAAKP,EAAIO,IAAO,CAE7B,GAAiB,IAAZlB,EAAGgB,GACPF,GAAMN,EAAME,OAIZ,IAFAH,EAAMX,EAAQI,EAAGgB,GACjBD,EAAKhB,EACCkB,EAAK,EAAGA,EAAKP,EAAIO,IACtBd,EAAGW,IAAQjB,EAAGkB,GAAOR,EACrBQ,GAAMH,EACNE,GAAMN,EAGRQ,GAAMH,EACNC,GAAML,CACN,CACD,OAAON,CACR,CCxHA,SAASV,EAAM2B,EAAO1B,EAAGC,EAAGC,EAAOC,EAAGC,EAASE,EAAGC,EAASE,EAAGkB,GAC7D,IAAIC,EACAC,EACAC,EACAC,EAIJ,IAAMC,EAAUN,GACf,MAAM,IAAIO,UAAWC,EAAQ,uEAAwER,IAEtG,GAAK1B,EAAI,EACR,MAAM,IAAImC,WAAYD,EAAQ,gFAAiFlC,IAEhH,GAAKC,EAAI,EACR,MAAM,IAAIkC,WAAYD,EAAQ,+EAAgFjC,IAE/G,GAAiB,IAAZG,EACJ,MAAM,IAAI+B,WAAYD,EAAQ,kEAAmE9B,IAElG,GAAiB,IAAZG,EACJ,MAAM,IAAI4B,WAAYD,EAAQ,mEAAoE3B,IAQnG,GANAqB,EAAOQ,EAAeV,GAMjBC,EAAMU,EAAK,EAJfR,EADID,EACG5B,EAEAC,GAGP,MAAM,IAAIkC,WAAYD,EAAQ,4FAA6FL,EAAMF,IAGlI,OAAW,IAAN3B,GAAiB,IAANC,GAAqB,IAAVC,EACnBO,GAIHmB,GACJE,EAAM,EACNC,EAAMJ,IAENG,EAAMH,EACNI,EAAM,GAEAO,EAAMtC,EAAGC,EAAGC,EAAOC,EAAGC,EATxBmC,EAAevC,EAAGI,GASmBE,EAAGC,EARxCgC,EAAetC,EAAGM,GAQmCE,EAAGqB,EAAKC,EAAK,GACxE,CCjDA,SAAShC,EAAMC,EAAGC,EAAGC,EAAOC,EAAGC,EAASC,EAASC,EAAGC,EAASC,EAASC,EAAGC,EAAUC,EAAUC,GAC5F,GAAKZ,EAAI,EACR,MAAM,IAAImC,WAAYD,EAAQ,+EAAgFlC,IAE/G,GAAKC,EAAI,EACR,MAAM,IAAIkC,WAAYD,EAAQ,gFAAiFjC,IAEhH,GAAiB,IAAZG,EACJ,MAAM,IAAI+B,WAAYD,EAAQ,kEAAmE9B,IAElG,GAAiB,IAAZG,EACJ,MAAM,IAAI4B,WAAYD,EAAQ,mEAAoE3B,IAGnG,OAAW,IAANP,GAAiB,IAANC,GAAqB,IAAVC,EACnBO,EAED6B,EAAMtC,EAAGC,EAAGC,EAAOC,EAAGC,EAASC,EAASC,EAAGC,EAASC,EAASC,EAAGC,EAAUC,EAAUC,EAC5F,CCjDA4B,EAAAzC,EAAA,UAAA0C"}